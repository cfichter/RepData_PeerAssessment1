points[i,3] <- which.min(distances)
}
points$c
centroids <- data.frame( x = c(25,44,29,35,55,42,23,64,33,55),
y = c(125,105,97,63,63,57,40,37,22,20))
points <- data.frame( x = c(28,65,50,55,38,50,63,43,50,50),
y =c(145,140,130,118,115,90,88,83,60,30),
c = c(0,0,0,0,0,0,0,0,0,0))
distances <- array(c(0,0,0,0,0,0,0,0,0,0))
for (i in 1:10){
for (j in 1:10){
distances[i] <- sqrt((points[i,1]-centroids[j,1])^2+(points[i,2]-centroids[j,2])^2)
}
points[i,3] <- which.min(distances)
points$c
}
points$c
points
i <- 1
for (j in 1:10){
distances[i] <- sqrt((points[i,1]-centroids[j,1])^2+(points[i,2]-centroids[j,2])^2)
}
points[i,3] <- which.min(distances)
points
centroids <- data.frame( x = c(25,44,29,35,55,42,23,64,33,55),
y = c(125,105,97,63,63,57,40,37,22,20))
points <- data.frame( x = c(28,65,50,55,38,50,63,43,50,50),
y =c(145,140,130,118,115,90,88,83,60,30),
c = c(0,0,0,0,0,0,0,0,0,0))
distances <- array(c(0,0,0,0,0,0,0,0,0,0))
i <- 1
for (j in 1:10){
distances[i] <- sqrt((points[i,1]-centroids[j,1])^2+(points[i,2]-centroids[j,2])^2)
}
points[i,3] <- which.min(distances)
points
distances
i <- 1
for (j in 1:10){
distances[i] <- (points[i,1]-centroids[j,1])^2+(points[i,2]-centroids[j,2])^2
}
points[i,3] <- which.min(distances)
distances
for (j in 1:10){
distances[i] <- (points[i,1]-centroids[j,1])^2
}
points[i,3] <- which.min(distances)
distances
points[,1]-centroids[,1]
(points[,1]-centroids[,1])^2
(points[,1]-centroids[,1])^2 + (points[,2]-centroids[,2])^2
sqrt((points[,1]-centroids[,1])^2 + (points[,2]-centroids[,2])^2)
points[1,1]-centroids[,1]
(points[1,1]-centroids[,1])^2
(points[1,1]-centroids[,1])^2+(points[1,2]-centroids[,2])^2
sqrt((points[1,1]-centroids[,1])^2+(points[1,2]-centroids[,2])^2)
d <- sqrt((points[1,1]-centroids[,1])^2+(points[1,2]-centroids[,2])^2)
which.min(d)
centroids <- data.frame( x = c(25,44,29,35,55,42,23,64,33,55),
y = c(125,105,97,63,63,57,40,37,22,20))
points <- data.frame( x = c(28,65,50,55,38,50,63,43,50,50),
y =c(145,140,130,118,115,90,88,83,60,30),
c = c(0,0,0,0,0,0,0,0,0,0))
distances <- array(c(0,0,0,0,0,0,0,0,0,0))
for (i in 1:10){
distances[i] <- sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
points[i,3] <- which.min(distances)
}
points$c
i <- 1
distances[i] <- sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
for (i in 1:10){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
help("hclust")
centroids <- data.frame( x = c(25,52.50,36,35,52.50,42,23,64,33,52.50),
y = c(125,109.33,90,63,61.5,57,40,37,25))
centroids <- data.frame( x = c(25,52.50,36,35,52.50,42,23,64,33,52.50),
y = c(125,109.33,90,63,61.5,57,40,37,22,25))
centroids <- data.frame( x = c(5,20),
y = c(10,5))
points <- data.frame( x = c(6,11,11,17)
y =c(7,4,5,2),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:10){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points$c
points
centroids <- data.frame( x = c(5,20),
y = c(10,5))
points <- data.frame( x = c(6,11,11,17)
y =c(7,4,5,2),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
centroids <- data.frame( x = c(5,20),
y = c(10,5))
points <- data.frame( x = c(6,11,11,17),
y =c(7,4,5,2),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
points
for (i in 1:10){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
for (i in 1:2){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
points <- data.frame( x = c(3,13,14,23),
y =c(15,7,10,6),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:2){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points$c
points
points <- data.frame( x = c(3,13,14,23),
y =c(15,7,10,6),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:2){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points$c
distances <- array(c(0,0,0,0))
for (i in 1:2){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
centroids <- data.frame( x = c(5,20),
y = c(10,5))
points <- data.frame( x = c(6,11,11,17),
y =c(7,4,5,2),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:4){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
points <- data.frame( x = c(3,13,14,23),
y =c(15,7,10,6),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:4){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
points <- data.frame( x = c(7,12,13,16),
y =c(8,5,10,4),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:4){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
points <- data.frame( x = c(6,11,14,23),
y =c(7,4,10,6),
c = c(0,0,0,0))
distances <- array(c(0,0,0,0))
for (i in 1:4){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points
M <- matrix(c(1,0,0,0,2,0,0,0,0))
M
M <- matrix(c(1,0,0,0,2,0,0,0,0),nrows=3,ncols=3)
M <- matrix(c(1,0,0,0,2,0,0,0,0),nrows=3,ncol=3)
M <- matrix(c(1,0,0,0,2,0,0,0,0),nrow=3,ncol=3)
M
svd(M)
svdM <- svd(M)
svdM$u %*% diag(svdM$d) %*% t(svdM$v)
pinv
1/svdM$diag(d)
1%/%svdM$diag(d)
svdM$diag(d)
1/diag(svdM$d)
t(1/diag(svdM$d))
centroids <- data.frame( x = c(0,10),
y = c(0,10))
points <- data.frame( x = c(1,3,4,7,8,9),
y =c(6,7,3,7,2,5),
c = c(0,0,0,0,0,0))
distances <- array(c(0,0,0,0,0,0))
len <- length(distances)
for (i in 1:len){
distances[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- distances[i]
}
points$c
points
centroids <- data.frame( x = c(0,10),
y = c(0,10))
points <- data.frame( x = c(1,3,4,7,8,9),
y =c(6,7,3,7,2,5),
c = c(0,0,0,0,0,0))
distances <- array(c(0,0,0,0,0,0))
clusters <- array(c(0,0,0,0,0,0))
len <- length(distances)
for (i in 1:len){
distances[i] <- sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
clusters[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- clusters[i]
}
points; clusters
distances[i] <- sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2)
centroids <- data.frame( x = c(0,10),
y = c(0,10))
points <- data.frame( x = c(1,3,4,7,8,9),
y =c(6,7,3,7,2,5),
c = c(0,0,0,0,0,0),
d = c(0,0,0,0,0,0))
#distances <- array(c(0,0,0,0,0,0))
clusters <- array(c(0,0,0,0,0,0))
len <- length(distances)
for (i in 1:len){
clusters[i] <- which.min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
points[i,3] <- clusters[i]
points[i,4] <- min(sqrt((points[i,1]-centroids[,1])^2+(points[i,2]-centroids[,2])^2))
}
points; clusters
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
data_frame
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
budget
budget<-budget/data_frame$bid
budget
budget<-floor(budget)
budget
budget_org<-budget
for(i in c(1:34)){
vect<-which(budget>0)
data_frame_step1<-data_frame[vect,]
#first bid allocation
x<-data_frame_step1[,"bid"]*data_frame_step1[,"ctr1"]
#find out who wins the first allocation
max_x<-data_frame_step1[which(x==max(x)),"Users"]
budget[max_x]<-budget[max_x]-1
data_frame[data_frame[,"Users"]==max_x,"Clicks"]<-data_frame[data_frame[,"Users"]==max_x,"Clicks"]+1
exclude_x<-which(x<max(x))
data_frame_step2<-data_frame_step1[exclude_x,]
y<-data_frame_step2[,"bid"]*data_frame_step2[,"ctr2"]
max_y<-data_frame_step2[which(y==max(y)),"Users"]
budget[max_y]<-budget[max_y]-1
data_frame[data_frame[,"Users"]==max_y,"Clicks"]<-data_frame[data_frame[,"Users"]==max_y,"Clicks"]+1
exclude_y<-which(y<max(y))
data_frame_step3<-data_frame_step2[exclude_y,]
z<-data_frame_step3[,"bid"]*data_frame_step3[,"ctr3"]
max_z<-data_frame_step3[which(z==max(z)),"Users"]
budget[max_z]<-budget[max_z]-1
data_frame[data_frame[,"Users"]==max_z,"Clicks"]<-data_frame[data_frame[,"Users"]==max_z,"Clicks"]+1
print(data_frame$Clicks)
}
#remove the last entry since we only have 101 clicks - i have 34*3 = 102
data_frame[data_frame[,"Users"]==max_z,"Clicks"]<-data_frame[data_frame[,"Users"]==max_z,"Clicks"]-1
data_frame$Clicks
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
budget<-budget/data_frame$bid
budget<-floor(budget)
budget_org<-budget
#phase1
data_frame$bid*data_frame$ctr1 #player A will win bid 1
data_frame$bid*data_frame$ctr2 #player C will win bid 2
data_frame$bid*data_frame$ctr3 #player E will win bid 3
#since A always win the first round, then A is the constraint.
#when A has 10 clicks, then
A<-10
total_views<-A/data_frame[data_frame$Users=="A","ctr1"]
#each of the rest get clicks equvialent to the porportion of the position CTR.
C<-total_views*data_frame[data_frame$Users=="C","ctr2"]
C<-round(C)
E<-total_views*data_frame[data_frame$Users=="E","ctr3"]
E<-round(E)
total_ctr1<-A+C+E
total_ctr1
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
budget<-budget/data_frame$bid
budget<-floor(budget)
budget_org<-budget
#phase1
data_frame$bid*data_frame$ctr1 #player A will win bid 1
data_frame$bid*data_frame$ctr2 #player C will win bid 2
data_frame$bid*data_frame$ctr3 #player E will win bid 3
#since A always win the first round, then A is the constraint.
#when A has 10 clicks, then
A<-10
total_views<-A/data_frame[data_frame$Users=="A","ctr1"]
#each of the rest get clicks equvialent to the porportion of the position CTR.
C<-total_views*data_frame[data_frame$Users=="C","ctr2"]
C<-round(C)
E<-total_views*data_frame[data_frame$Users=="E","ctr3"]
E<-round(E)
total_ctr1<-A+C+E
total_ctr1
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
budget<-budget/data_frame$bid
budget<-floor(budget)
budget_org<-budget
#phase1
data_frame$bid*data_frame$ctr1 #player A will win bid 1
data_frame$bid*data_frame$ctr2 #player C will win bid 2
data_frame$bid*data_frame$ctr3 #player E will win bid 3
#since A always win the first round, then A is the constraint.
#when A has 10 clicks, then
A<-10
total_views<-A/data_frame[data_frame$Users=="A","ctr1"]
#each of the rest get clicks equvialent to the porportion of the position CTR.
C<-total_views*data_frame[data_frame$Users=="C","ctr2"]
C<-round(C)
E<-total_views*data_frame[data_frame$Users=="E","ctr3"]
E<-round(E)
total_ctr1<-A+C+E
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
data_frame
0.015/1000
1.5/1000
data_frame$bid * data_frmae$ctr1
data_frame$bid * data_frame$ctr1
data_frame$bid * data_frame$ctr2
data_frame$bid * data_frame$ctr3
budget<-budget/data_frame$bid
budget<-floor(budget)
budget_org<-budget
budget
data_frame$bid*data_frame$ctr1 #player A will win bid 1
data_frame$bid*data_frame$ctr2 #player C will win bid 2
data_frame$bid*data_frame$ctr3 #player E will win bid 3
A<-10
total_views<-A/data_frame[data_frame$Users=="A","ctr1"]
total:views
total_views
A<-10
data_frame[data_frame$Users=="A","ctr1"]
data_frame<-matrix(c(0.1,0.09,0.08,0.07,0.06,
0.015,0.016,0.017,0.018,0.019,
0.01,0.012,0.014,0.015,0.016,
0.005,0.006,0.007,0.008,0.01,
1,2,3,4,5),nrow=5)
data_frame<-as.data.frame(data_frame)
names(data_frame)<-c("bid","ctr1","ctr2","ctr3","budget")
data_frame$Clicks<-0
data_frame$Users<-c("A","B","C","D","E")
budget<-data_frame$budget
names(budget)<-c("A","B","C","D","E")
budget<-budget/data_frame$bid
budget<-floor(budget)
budget_org<-budget
for(i in c(1:34)){
vect<-which(budget>0)
data_frame_step1<-data_frame[vect,]
#first bid allocation
x<-data_frame_step1[,"bid"]*data_frame_step1[,"ctr1"]
#find out who wins the first allocation
max_x<-data_frame_step1[which(x==max(x)),"Users"]
budget[max_x]<-budget[max_x]-1
data_frame[data_frame[,"Users"]==max_x,"Clicks"]<-data_frame[data_frame[,"Users"]==max_x,"Clicks"]+1
exclude_x<-which(x<max(x))
data_frame_step2<-data_frame_step1[exclude_x,]
y<-data_frame_step2[,"bid"]*data_frame_step2[,"ctr2"]
max_y<-data_frame_step2[which(y==max(y)),"Users"]
budget[max_y]<-budget[max_y]-1
data_frame[data_frame[,"Users"]==max_y,"Clicks"]<-data_frame[data_frame[,"Users"]==max_y,"Clicks"]+1
exclude_y<-which(y<max(y))
data_frame_step3<-data_frame_step2[exclude_y,]
z<-data_frame_step3[,"bid"]*data_frame_step3[,"ctr3"]
max_z<-data_frame_step3[which(z==max(z)),"Users"]
budget[max_z]<-budget[max_z]-1
data_frame[data_frame[,"Users"]==max_z,"Clicks"]<-data_frame[data_frame[,"Users"]==max_z,"Clicks"]+1
print(data_frame$Clicks)
}
#remove the last entry since we only have 101 clicks - i have 34*3 = 102
data_frame[data_frame[,"Users"]==max_z,"Clicks"]<-data_frame[data_frame[,"Users"]==max_z,"Clicks"]-1
data_frame$Clicks
sum(data_frame)
sum(data_frame$Clicks)
setwd("C:/Documents and Settings/Administrador/Coursera/Reproducible_Research/RepData_PeerAssessment1")
dir()
data <- read.csv("activity.csv")
## What is mean total number of steps taken per day?
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
hist(total.steps,
breaks=(max(total.steps)-min(total.steps))/1000,
main="Histogram of the total number of steps taken each day",
xlab="Total number of steps taken each day",
ylab="Frecuency (days)",
col = "lightblue",border="blue")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
## What is the average daily activity pattern?
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
plot(averages,type="l",
xlab="5-minute interval",
ylab="Average number of steps taken")
## Which 5-minute interval, on average across all the days in the dataset,
## contains the maximum number of steps?
averages[which.max(averages$steps),]
## Imputing missing values
## Collect missing values
missing <- is.na(data$steps)
## Resume
table(missing)
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
# Preserve data
filled.data <- data
#Fill
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
# Make a histogram of the total number of steps taken each day and
# calculate and report the mean and median total number of steps taken per day.
hist(total.steps,
breaks=(max(total.steps)-min(total.steps))/1000,
main="Histogram of the total number of steps taken each day",
xlab="Total number of steps taken each day",
ylab="Frecuency (days)",
col = "lightblue",border="blue")
mean(total.steps)
median(total.steps)
## Are there differences in activity patterns between weekdays and weekends?
library(lubridate)
weekday.or.weekend <- function(date) {
day <- wday(date)
if (day>=2 & day <= 6) #Monday to Friday
return("weekday")
else if (day == 1 | day == 7) #1-Sunday, 7-Saturday
return("weekend")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$dayfactor <- sapply(filled.data$date, FUN=weekday.or.weekend)
## aggregate and plot
averages <- aggregate(steps ~ interval + dayfactor, data=filled.data, mean)
library(ggplot2)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayfactor ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
dir()
